Scenario: Two Developers, Two Branches

Repo: learn-git-github

Branches:

main (default branch)

feature/login (new feature branch)

You and your teammate are working at the same time.

ðŸ”¹ Step 1: Setup

You clone the repo:

git clone https://github.com/username/learn-git-github.git
cd learn-git-github


Create and switch to a branch:

git checkout -b feature/login

ðŸ”¹ Step 2: Teammate Updates main on GitHub

Your teammate edits index.html in the main branch and pushes it:

git checkout main
echo "<h2>Welcome Page Updated by teammate</h2>" >> index.html
git add index.html
git commit -m "Updated index.html with new welcome message"
git push origin main


Now GitHubâ€™s main branch is ahead of your local copy.

ðŸ”¹ Step 3: You Are Working on feature/login

You add a login.html file:

git checkout feature/login
echo "<h1>Login Page</h1>" > login.html
git add login.html
git commit -m "Added login page"


But your local main is behind GitHubâ€™s main.

ðŸ”¹ Step 4: Run git pull origin main

While on feature/login, run:

git pull origin main

âœ… What happens:

Git fetches latest changes from GitHubâ€™s main.

It merges them into your current branch (feature/login).

So now:

Your feature/login branch has both login.html and updated index.html.

ðŸ”¹ Step 5: Merge Back to main

Once youâ€™re ready:

git checkout main
git merge feature/login
git push origin main


Now main has both:

Teammateâ€™s updated index.html

Your new login.html

ðŸ”¹ Key Takeaway

git pull origin main â†’ keeps your current branch up to date with the latest from GitHubâ€™s main.

This avoids merge conflicts later when you merge your feature branch back into main.